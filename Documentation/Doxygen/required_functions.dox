/**

\page required_functions Required Functions

You will start by implementing the required functions described below. Before you write these functions, you need to add the following include file to the top of your source file. (If you are using precompiled header files, make sure the precompiled header file (e.g. stdafx.h) is the first included file.)

\code
#include <FECore\FECoreKernel.h>
\endcode

The following functions need to be defined in the plugin and are needed for plugin registration, initialization, and cleanup. 

1. GetSDKVersion: Returns the version of the SDK library that is used by this plugin.
2. PluginInitialize: Place for initializing plugin data
3. PluginCleanup: Place for releasing any resources allocated by the plugin.
4. GetPluginVersion: Return the version number of plugin. 

Although these functions are referred to as the required functions, only the GetSDKVersion and PluginInitialize are really mandatory. The other ones only need to be defined if they are actually used. 

\section GetSDKVersion
This function returns the version number of the SDK that was used to build the plugin. When loading the plugin, FEBio will check this number
to see if the plugin is compatible with the FEBio version that is trying to load the plugin. This function needs to return the
FE_SDK_VERSION macro which is defined in the file FECore\version.h

\code
FECORE_EXPORT unsigned int GetSDKVersion()
{
	return FE_SDK_VERSION;
}
\endcode

FEBio will not load the plugin if this function is omitted or if the returned version number is incompatible with the version of FEBio that is trying to load the plugin.

\section PluginInitialize
This function will be the first function called by FEBio and can be used to allocate and initialize plugin data. It is also recommended to call the SetInstance function as in the example below.

\code
FECORE_EXPORT void PluginInitialize(FECoreKernel& febio)
{
	FECoreKernel::SetInstance(&febio);
}
\endcode

This function takes one parameter, a reference to the kernel object. This object is used for accessing the resources managed by this class, such as the \ref plugin_log "log file". 
This is also a good place to allocate any resources that the plugin may need. The call to SetInstance ensures
that the plugin uses the same kernel object as the FEBio executable. Since a plugin links statically to the FECore library, it actually has its own FECoreKernel object
(and related resources such as the logfile). However, this is usally not desirable and calling the SetInstance function ensure that both the plugin and the FEBio 
executable use the same kernel.

\section PluginCleanup
This function will be called when FEBio terminates and can be used to deallocate resources.

\code
FECORE_EXPORT void PluginCleanup()
{
	// Clean up plugin resources 
}
\endcode

\section GetPluginVersion
You can define a verion number for a plugin by implementing the optional function GetPluginVersion. 

\code
FECORE_EXPORT void GetPluginVersion(int& major, int& minor, int& patch)
{
	major = 1;
	minor = 0;
	patch = 3;
}
\endcode

At this point, FEBio doesn't do much with these version numbers except print them to the screen when the plugin is loaded. 

*/
